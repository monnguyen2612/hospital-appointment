{"ast":null,"code":"var _jsxFileName = \"/Users/capt4inmon/hospital-appointment-booking/src/routes/Hospitals.js\";\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport PropTypes from 'prop-types'; // import hospitalsAndDetails from '../static/data/hospitalsAndDetails';\n\nimport Search from '../components/Search';\nimport HospitalCard from '../components/HospitalCard';\nimport './Hospitals.css';\n\nconst Hospitals = props => {\n  const [hospitalName, setHospitalName] = useState('');\n  const [hospitalCards, setHospitalCards] = useState([]);\n  const hospitalDetails = useRef([{\n    hid: 123,\n    name: \"Từ Dũ\",\n    address: \"284 Cống Quỳnh, Phường Phạm Ngũ Lão, Quận 1, Thành phố Hồ Chí Minh\"\n  }, {\n    hid: 123,\n    name: \"Từ Dũ\",\n    address: \"284 Cống Quỳnh, Phường Phạm Ngũ Lão, Quận 1, Thành phố Hồ Chí Minh\"\n  }]);\n  const {\n    history\n  } = props; // The following function accepts and array of hospital details\n  // It maps those details into the card and update it on the webpage\n\n  const updateHospitalCards = useCallback(details => {\n    setHospitalCards(details.map(hospital => /*#__PURE__*/React.createElement(HospitalCard, {\n      history: history,\n      id: hospital.hid,\n      key: hospital.hid,\n      hospitalName: hospital.name,\n      address: hospital.address,\n      departments: hospital.depts,\n      timings: hospital.timings,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    })));\n  }, [setHospitalCards, history]); // console.log('test');\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_SERVER_URL}/hospitals`).then(response => response.json()).then(data => {\n      console.log(data);\n      hospitalDetails.current = data;\n      updateHospitalCards(hospitalDetails.current);\n    });\n  }, [updateHospitalCards]); // The following effect is triggered when the webpage is mounted\n  // It is used to intialize the cards on the page when it is mounted\n  // useEffect(() => {\n  //   updateHospitalCards(hospitalDetails.current);\n  // }, [updateHospitalCards]);\n  // The following function filters the details of the hospitals based on\n  // hospitalName, if there is a match then those values are retained.\n  // Finally to reflect it on the frontend, we call updateHospitalCards()\n\n  const onSearchQuery = hospitalNameRecieved => {\n    const filteredDetails = hospitalDetails.current.filter(details => details.name.toLowerCase().includes(hospitalNameRecieved.toLowerCase()));\n    updateHospitalCards(filteredDetails);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"first-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchbar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    onSearchQuery: onSearchQuery,\n    setHospitalName: setHospitalName,\n    hospitalName: hospitalName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchbar-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, \"Search hospitals by name to book your appointments\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"hospital-cards-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }), hospitalCards));\n};\n\nHospitals.propTypes = {\n  history: PropTypes.object.isRequired\n};\nexport default Hospitals;","map":{"version":3,"sources":["/Users/capt4inmon/hospital-appointment-booking/src/routes/Hospitals.js"],"names":["React","useState","useEffect","useRef","useCallback","PropTypes","Search","HospitalCard","Hospitals","props","hospitalName","setHospitalName","hospitalCards","setHospitalCards","hospitalDetails","hid","name","address","history","updateHospitalCards","details","map","hospital","depts","timings","fetch","process","env","REACT_APP_SERVER_URL","then","response","json","data","console","log","current","onSearchQuery","hospitalNameRecieved","filteredDetails","filter","toLowerCase","includes","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, {\n  useState, useEffect, useRef, useCallback,\n} from 'react';\nimport PropTypes from 'prop-types';\n// import hospitalsAndDetails from '../static/data/hospitalsAndDetails';\nimport Search from '../components/Search';\nimport HospitalCard from '../components/HospitalCard';\nimport './Hospitals.css';\n\nconst Hospitals = (props) => {\n  const [hospitalName, setHospitalName] = useState('');\n  const [hospitalCards, setHospitalCards] = useState([]);\n  const hospitalDetails = useRef([{\n    hid: 123,\n    name: \"Từ Dũ\",\n    address: \"284 Cống Quỳnh, Phường Phạm Ngũ Lão, Quận 1, Thành phố Hồ Chí Minh\",\n  },{\n    hid: 123,\n    name: \"Từ Dũ\",\n    address: \"284 Cống Quỳnh, Phường Phạm Ngũ Lão, Quận 1, Thành phố Hồ Chí Minh\",\n  }]);\n  const { history } = props;\n\n  // The following function accepts and array of hospital details\n  // It maps those details into the card and update it on the webpage\n  const updateHospitalCards = useCallback((details) => {\n    setHospitalCards(details.map((hospital) => (\n      <HospitalCard\n        history={history}\n        id={hospital.hid}\n        key={hospital.hid}\n        hospitalName={hospital.name}\n        address={hospital.address}\n        departments={hospital.depts}\n        timings={hospital.timings}\n      />\n    )));\n  }, [setHospitalCards, history]);\n  // console.log('test');\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_SERVER_URL}/hospitals`)\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data);\n        hospitalDetails.current = data;\n        updateHospitalCards(hospitalDetails.current);\n      });\n  }, [updateHospitalCards]);\n\n  // The following effect is triggered when the webpage is mounted\n  // It is used to intialize the cards on the page when it is mounted\n  // useEffect(() => {\n  //   updateHospitalCards(hospitalDetails.current);\n  // }, [updateHospitalCards]);\n\n  // The following function filters the details of the hospitals based on\n  // hospitalName, if there is a match then those values are retained.\n  // Finally to reflect it on the frontend, we call updateHospitalCards()\n  const onSearchQuery = (hospitalNameRecieved) => {\n    const filteredDetails = hospitalDetails.current.filter(\n      (details) => details.name.toLowerCase().includes(hospitalNameRecieved.toLowerCase()),\n    );\n    updateHospitalCards(filteredDetails);\n  };\n\n  return (\n    <div>\n      <div className=\"first-section\">\n        <div className=\"searchbar\">\n          <Search\n            onSearchQuery={onSearchQuery}\n            setHospitalName={setHospitalName}\n            hospitalName={hospitalName}\n          />\n          <div className=\"searchbar-description\">Search hospitals by name to book your appointments</div>\n        </div>\n      </div>\n      <div className=\"hospital-cards-container\">\n        <hr />\n        {hospitalCards}\n      </div>\n    </div>\n  );\n};\n\nHospitals.propTypes = {\n  history: PropTypes.object.isRequired,\n};\n\nexport default Hospitals;\n"]},"metadata":{},"sourceType":"module"}